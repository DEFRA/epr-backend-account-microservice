trigger: none
pr: none
pool: DEFRA-COMMON-ubuntu2004-SSV3

parameters:
- name: envToDeploy
  displayName: Env to deploy to
  default: development
  type: string
  values:
    - development
    - preprod
    - prod

- name: imageTag
  displayName: Enter Tag for the Image
  default: ''
  type: string

variables:
  - template: vars/${{ parameters.envToDeploy }}.yaml
  - ${{ if eq(parameters.envToDeploy, 'development') }}:
    - name: env
      value: DEV1
  - ${{ elseif eq(parameters.envToDeploy, 'preprod') }}:
    - name: env
      value: PRE1
  - ${{ elseif eq(parameters.envToDeploy, 'prod') }}:
    - name: env
      value: PRD1

stages:
- stage: Validate
  jobs:
  - deployment: 'DeployAppCode'
    environment: $(env)
    strategy:
      runOnce:
        deploy:
          steps: 
            - bash: |
                echo "Deploying dockerImage --> "$(registryName):${{ parameters.imageTag }} " to env --> "${{ parameters.envToDeploy }}
              displayName: "Show Env Details"

            - ${{ if ne(parameters.envToDeploy, 'development') }}:
              # Obtain Docker Password
              - task: AzureKeyVault@2
                displayName: 'Obtain Docker Password'
                inputs:
                  azureSubscription: 'AZD-RWD-DEV1'
                  KeyVaultName: 'DEVRWDINFKV1401'
                  SecretsFilter: 'DockerPassword'
                  RunAsPreJob: true

              # Copy the image from Dev ACR (release candidate) to Target ACR
              - task: AzureCLI@2
                displayName: 'Copy Image to ${{ parameters.envToDeploy }}'
                inputs:
                  azureSubscription: $(azureSubscription)
                  scriptType: 'pscore'
                  scriptLocation: 'inlineScript'
                  inlineScript: |
                    az acr login --name $(acrName)
                    az acr import --name $(acrName) --source devrwdinfac1401.azurecr.io/$(registryName):${{ parameters.imageTag }} --image $(registryName):${{ parameters.imageTag }} --username devrwdinfac1401 --password $(DockerPassword) --force

            
            - task: AzureRmWebAppDeployment@4
              displayName: 'Deploy code to $(appServiceName)'
              inputs:
                ConnectionType: 'AzureRM'
                azureSubscription: $(azureSubscription)
                appType: 'webAppContainer'
                WebAppName: $(appServiceName)
                DockerNamespace: '$(acrName).azurecr.io'
                DockerRepository: $(registryName)
                DockerImageTag: ${{ parameters.imageTag }}
  
  