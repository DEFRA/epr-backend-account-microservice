// <auto-generated />
using System;
using BackendAccountService.Data.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackendAccountService.Data.Migrations
{
    [DbContext(typeof(AccountsDbContext))]
    partial class AccountsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence<int>("OrganisationReferenceNumber")
                .StartsAt(100001L);

            modelBuilder.Entity("BackendAccountService.Data.Entities.ApprovedPersonEnrolment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<int>("EnrolmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<string>("NomineeDeclaration")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("NomineeDeclarationTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("EnrolmentId")
                        .IsUnique();

                    b.ToTable("ApprovedPersonEnrolments");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Changes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("InternalId")
                        .HasColumnType("int");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("OrganisationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ServiceId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.ChangeHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApprovedById")
                        .HasColumnType("int");

                    b.Property<string>("ApproverComments")
                        .HasMaxLength(180)
                        .HasColumnType("nvarchar(180)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<DateTimeOffset?>("DecisionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DeclarationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("OrganisationId");

                    b.HasIndex("PersonId");

                    b.ToTable("ChangeHistory");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.CodeClassificationLookup", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CodeClass")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("GroupType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.ToTable("CodeClassificationLookups");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            CodeClass = "Not Set",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Not Set",
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            GroupType = "Not Set",
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 1,
                            CodeClass = "Joiner",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Joiner scenario",
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            GroupType = "Entry",
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2,
                            CodeClass = "Leaver",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Leaver scenario",
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            GroupType = "Exit",
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.CodeScenarioMapping", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CodeStatusConfigId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<int>("ScenarioReferenceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CodeStatusConfigId");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("ScenarioReferenceId");

                    b.ToTable("CodeScenarioMapping");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CodeStatusConfigId = 1,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ScenarioReferenceId = 1
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            CodeStatusConfigId = 1,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ScenarioReferenceId = 2
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            CodeStatusConfigId = 2,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ScenarioReferenceId = 3
                        },
                        new
                        {
                            Id = 4,
                            Active = true,
                            CodeStatusConfigId = 3,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ScenarioReferenceId = 4
                        },
                        new
                        {
                            Id = 5,
                            Active = true,
                            CodeStatusConfigId = 4,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ScenarioReferenceId = 6
                        },
                        new
                        {
                            Id = 6,
                            Active = true,
                            CodeStatusConfigId = 5,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ScenarioReferenceId = 7
                        },
                        new
                        {
                            Id = 7,
                            Active = true,
                            CodeStatusConfigId = 6,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ScenarioReferenceId = 5
                        },
                        new
                        {
                            Id = 8,
                            Active = true,
                            CodeStatusConfigId = 7,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ScenarioReferenceId = 8
                        },
                        new
                        {
                            Id = 9,
                            Active = true,
                            CodeStatusConfigId = 8,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ScenarioReferenceId = 9
                        },
                        new
                        {
                            Id = 10,
                            Active = true,
                            CodeStatusConfigId = 9,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ScenarioReferenceId = 10
                        },
                        new
                        {
                            Id = 11,
                            Active = true,
                            CodeStatusConfigId = 10,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ScenarioReferenceId = 11
                        },
                        new
                        {
                            Id = 12,
                            Active = true,
                            CodeStatusConfigId = 11,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ScenarioReferenceId = 12
                        },
                        new
                        {
                            Id = 13,
                            Active = true,
                            CodeStatusConfigId = 12,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ScenarioReferenceId = 12
                        },
                        new
                        {
                            Id = 14,
                            Active = true,
                            CodeStatusConfigId = 13,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ScenarioReferenceId = 13
                        },
                        new
                        {
                            Id = 15,
                            Active = true,
                            CodeStatusConfigId = 14,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ScenarioReferenceId = 14
                        },
                        new
                        {
                            Id = 16,
                            Active = true,
                            CodeStatusConfigId = 15,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ScenarioReferenceId = 18
                        },
                        new
                        {
                            Id = 17,
                            Active = true,
                            CodeStatusConfigId = 16,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ScenarioReferenceId = 16
                        },
                        new
                        {
                            Id = 18,
                            Active = true,
                            CodeStatusConfigId = 17,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ScenarioReferenceId = 17
                        },
                        new
                        {
                            Id = 19,
                            Active = true,
                            CodeStatusConfigId = 18,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ScenarioReferenceId = 18
                        },
                        new
                        {
                            Id = 20,
                            Active = true,
                            CodeStatusConfigId = 19,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ScenarioReferenceId = 19
                        },
                        new
                        {
                            Id = 21,
                            Active = true,
                            CodeStatusConfigId = 20,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ScenarioReferenceId = 20
                        },
                        new
                        {
                            Id = 22,
                            Active = true,
                            CodeStatusConfigId = 21,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ScenarioReferenceId = 21
                        });
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.CodeStatusConfig", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("ClassificationId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("Enabled")
                        .HasColumnType("bit");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<string>("LegacyCode")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("MappedOldCodes")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MatchType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("RequiresJoinerDate")
                        .HasColumnType("bit");

                    b.Property<bool?>("RequiresLeaverDate")
                        .HasColumnType("bit");

                    b.Property<bool?>("RequiresRegType")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ClassificationId");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.ToTable("CodeStatusConfigs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClassificationId = 1,
                            Code = "01",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Producer who previously met thresholds has joined a group.",
                            Enabled = true,
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LegacyCode = "A",
                            MappedOldCodes = "None",
                            MatchType = "Direct",
                            RequiresJoinerDate = false,
                            RequiresLeaverDate = false,
                            RequiresRegType = true
                        },
                        new
                        {
                            Id = 2,
                            ClassificationId = 1,
                            Code = "02",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Producer who did not previously meet thresholds has joined a group (% obligation).",
                            Enabled = true,
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LegacyCode = "B",
                            MappedOldCodes = "None",
                            MatchType = "Direct",
                            RequiresJoinerDate = true,
                            RequiresLeaverDate = false,
                            RequiresRegType = true
                        },
                        new
                        {
                            Id = 3,
                            ClassificationId = 1,
                            Code = "03",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Producer who did not previously meet thresholds has joined a group (% obligation).",
                            Enabled = true,
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LegacyCode = "C",
                            MappedOldCodes = "None",
                            MatchType = "Direct",
                            RequiresJoinerDate = true,
                            RequiresLeaverDate = false,
                            RequiresRegType = true
                        },
                        new
                        {
                            Id = 4,
                            ClassificationId = 2,
                            Code = "04",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Producer left group; HC responsible for obligations due to MYC.",
                            Enabled = true,
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LegacyCode = "D",
                            MappedOldCodes = "C,D",
                            MatchType = "Direct",
                            RequiresJoinerDate = false,
                            RequiresLeaverDate = true,
                            RequiresRegType = true
                        },
                        new
                        {
                            Id = 5,
                            ClassificationId = 2,
                            Code = "05",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Producer left group; HC responsible for obligations due to MYC.",
                            Enabled = true,
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LegacyCode = "E",
                            MappedOldCodes = "C,D",
                            MatchType = "Direct",
                            RequiresJoinerDate = false,
                            RequiresLeaverDate = true,
                            RequiresRegType = true
                        },
                        new
                        {
                            Id = 6,
                            ClassificationId = 2,
                            Code = "06",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Producer meets thresholds; HC still responsible post-MYC.",
                            Enabled = true,
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LegacyCode = "F",
                            MappedOldCodes = "None",
                            MatchType = "Direct",
                            RequiresJoinerDate = false,
                            RequiresLeaverDate = true,
                            RequiresRegType = true
                        },
                        new
                        {
                            Id = 7,
                            ClassificationId = 1,
                            Code = "07",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Producer joined group; HC not responsible due to MYC.",
                            Enabled = true,
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LegacyCode = "G",
                            MappedOldCodes = "None",
                            MatchType = "Direct",
                            RequiresJoinerDate = false,
                            RequiresLeaverDate = false,
                            RequiresRegType = true
                        },
                        new
                        {
                            Id = 8,
                            ClassificationId = 2,
                            Code = "08",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Producer left group; HC still responsible due to MYC.",
                            Enabled = true,
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LegacyCode = "H",
                            MappedOldCodes = "None",
                            MatchType = "Direct",
                            RequiresJoinerDate = false,
                            RequiresLeaverDate = true,
                            RequiresRegType = true
                        },
                        new
                        {
                            Id = 9,
                            ClassificationId = 1,
                            Code = "09",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Producer joined group; not obligated due to MYC.",
                            Enabled = true,
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LegacyCode = "I",
                            MappedOldCodes = "None",
                            MatchType = "Direct",
                            RequiresJoinerDate = false,
                            RequiresLeaverDate = false,
                            RequiresRegType = true
                        },
                        new
                        {
                            Id = 10,
                            ClassificationId = 2,
                            Code = "10",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Producer left group; HC still responsible due to MYC.",
                            Enabled = true,
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LegacyCode = "J",
                            MappedOldCodes = "J",
                            MatchType = "Direct",
                            RequiresJoinerDate = false,
                            RequiresLeaverDate = true,
                            RequiresRegType = true
                        },
                        new
                        {
                            Id = 11,
                            ClassificationId = 2,
                            Code = "11",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "No longer obligated – insolvency event.",
                            Enabled = true,
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LegacyCode = "K",
                            MappedOldCodes = "A,B,H",
                            MatchType = "ManualReview",
                            RequiresJoinerDate = false,
                            RequiresLeaverDate = true,
                            RequiresRegType = true
                        },
                        new
                        {
                            Id = 12,
                            ClassificationId = 2,
                            Code = "12",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Ceased performing producer function.",
                            Enabled = true,
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LegacyCode = "L",
                            MappedOldCodes = "L",
                            MatchType = "ManualReview",
                            RequiresJoinerDate = false,
                            RequiresLeaverDate = true,
                            RequiresRegType = true
                        },
                        new
                        {
                            Id = 13,
                            ClassificationId = 2,
                            Code = "13",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Producer resigned from compliance scheme.",
                            Enabled = true,
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LegacyCode = "M",
                            MappedOldCodes = "E",
                            MatchType = "ManualReview",
                            RequiresJoinerDate = false,
                            RequiresLeaverDate = true,
                            RequiresRegType = true
                        },
                        new
                        {
                            Id = 14,
                            ClassificationId = 2,
                            Code = "14",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "CS terminated producer’s membership.",
                            Enabled = true,
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LegacyCode = "N",
                            MappedOldCodes = "F",
                            MatchType = "ManualReview",
                            RequiresJoinerDate = false,
                            RequiresLeaverDate = true,
                            RequiresRegType = true
                        },
                        new
                        {
                            Id = 15,
                            ClassificationId = 1,
                            Code = "15",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Became a producer due to mid-year change.",
                            Enabled = true,
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LegacyCode = "O",
                            MappedOldCodes = "None",
                            MatchType = "ManualReview",
                            RequiresJoinerDate = false,
                            RequiresLeaverDate = false,
                            RequiresRegType = true
                        },
                        new
                        {
                            Id = 16,
                            ClassificationId = 2,
                            Code = "16",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Merged with another company – not incapacity related.",
                            Enabled = true,
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LegacyCode = "P",
                            MappedOldCodes = "I",
                            MatchType = "ManualReview",
                            RequiresJoinerDate = false,
                            RequiresLeaverDate = true,
                            RequiresRegType = true
                        },
                        new
                        {
                            Id = 17,
                            ClassificationId = 1,
                            Code = "17",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Person becomes a producer as a result of carrying on the activities of an incapacitated producer.",
                            Enabled = true,
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LegacyCode = "Q",
                            MappedOldCodes = "A,B,H",
                            MatchType = "ManualReview",
                            RequiresJoinerDate = false,
                            RequiresLeaverDate = false,
                            RequiresRegType = true
                        },
                        new
                        {
                            Id = 18,
                            ClassificationId = 1,
                            Code = "18",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Producer who meets thresholds independently has left group. Holding company remains responsible for obligation due to mid year change.",
                            Enabled = true,
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LegacyCode = "",
                            MappedOldCodes = "",
                            MatchType = "ManualReview",
                            RequiresJoinerDate = true,
                            RequiresLeaverDate = false,
                            RequiresRegType = false
                        },
                        new
                        {
                            Id = 19,
                            ClassificationId = 1,
                            Code = "19",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Producer registered late.",
                            Enabled = true,
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LegacyCode = "",
                            MappedOldCodes = "",
                            MatchType = "ManualReview",
                            RequiresJoinerDate = true,
                            RequiresLeaverDate = false,
                            RequiresRegType = true
                        },
                        new
                        {
                            Id = 20,
                            ClassificationId = 1,
                            Code = "20",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Other – Joiner.",
                            Enabled = true,
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LegacyCode = "",
                            MappedOldCodes = "",
                            MatchType = "ManualReview",
                            RequiresJoinerDate = false,
                            RequiresLeaverDate = false,
                            RequiresRegType = true
                        },
                        new
                        {
                            Id = 21,
                            ClassificationId = 2,
                            Code = "21",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Other - Leaver.",
                            Enabled = true,
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LegacyCode = "",
                            MappedOldCodes = "",
                            MatchType = "ManualReview",
                            RequiresJoinerDate = false,
                            RequiresLeaverDate = false,
                            RequiresRegType = true
                        });
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.ComplianceScheme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompaniesHouseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("NationId");

                    b.ToTable("ComplianceSchemes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompaniesHouseNumber = "09100134",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = true,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Sustain Drinks Packaging Partnership"
                        },
                        new
                        {
                            Id = 2,
                            CompaniesHouseNumber = "00946107",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Biffpack",
                            NationId = 1
                        },
                        new
                        {
                            Id = 3,
                            CompaniesHouseNumber = "00946107",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = true,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Biffpack (Environment Agency)"
                        },
                        new
                        {
                            Id = 4,
                            CompaniesHouseNumber = "04559478",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Comply with Clarity",
                            NationId = 1
                        },
                        new
                        {
                            Id = 5,
                            CompaniesHouseNumber = "04559478",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = true,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Comply with Clarity (Northern Ireland Environment Agency)"
                        },
                        new
                        {
                            Id = 6,
                            CompaniesHouseNumber = "SC331930",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = true,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Co2 Compliance (Northern Ireland Environment Agency)"
                        },
                        new
                        {
                            Id = 7,
                            CompaniesHouseNumber = "SC331930",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Co2 Compliance (SEPA)",
                            NationId = 3
                        },
                        new
                        {
                            Id = 8,
                            CompaniesHouseNumber = "05695937",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Beyondly",
                            NationId = 1
                        },
                        new
                        {
                            Id = 9,
                            CompaniesHouseNumber = "05695937",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = true,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Comply Direct (Northern Ireland Environment Agency)"
                        },
                        new
                        {
                            Id = 10,
                            CompaniesHouseNumber = "04164355",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "ComplyPak",
                            NationId = 1
                        },
                        new
                        {
                            Id = 11,
                            CompaniesHouseNumber = "04164355",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = true,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "ComplyPak (Northern Ireland Environment Agency)"
                        },
                        new
                        {
                            Id = 12,
                            CompaniesHouseNumber = "04713606",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Ecosurety (EA)",
                            NationId = 1
                        },
                        new
                        {
                            Id = 13,
                            CompaniesHouseNumber = "04713606",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = true,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Ecosurety (Northern Ireland Environment Agency)"
                        },
                        new
                        {
                            Id = 14,
                            CompaniesHouseNumber = "SC499366",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Ecosurety Scotland (SEPA)",
                            NationId = 3
                        },
                        new
                        {
                            Id = 15,
                            CompaniesHouseNumber = "05859725",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "ERP UK Ltd",
                            NationId = 1
                        },
                        new
                        {
                            Id = 16,
                            CompaniesHouseNumber = "05859725",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = true,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "ERP UK Ltd Northern Ireland Environment Agency"
                        },
                        new
                        {
                            Id = 17,
                            CompaniesHouseNumber = "04592964",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Kite Environmental Solutions",
                            NationId = 1
                        },
                        new
                        {
                            Id = 18,
                            CompaniesHouseNumber = "04592964",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = true,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Kite Environmental Solutions"
                        },
                        new
                        {
                            Id = 19,
                            CompaniesHouseNumber = "NI044560",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = true,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Nipak Ltd (Northern Ireland Environment Agency)"
                        },
                        new
                        {
                            Id = 20,
                            CompaniesHouseNumber = "SC300070",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Scotpak (SEPA)",
                            NationId = 3
                        },
                        new
                        {
                            Id = 21,
                            CompaniesHouseNumber = "07699232",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Paperpak",
                            NationId = 1
                        },
                        new
                        {
                            Id = 22,
                            CompaniesHouseNumber = "07699232",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = true,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Paperpak (Northern Ireland Environment Agency)"
                        },
                        new
                        {
                            Id = 23,
                            CompaniesHouseNumber = "03417947",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Veolia (EA)",
                            NationId = 1
                        },
                        new
                        {
                            Id = 24,
                            CompaniesHouseNumber = "SC394249",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Veolia (SEPA)",
                            NationId = 3
                        },
                        new
                        {
                            Id = 25,
                            CompaniesHouseNumber = "04543366",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Recycle Wales (NRW)",
                            NationId = 4
                        },
                        new
                        {
                            Id = 26,
                            CompaniesHouseNumber = "SC225789",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = true,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Recycle-Pak (Northern Ireland Environment Agency)"
                        },
                        new
                        {
                            Id = 27,
                            CompaniesHouseNumber = "SC225789",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = true,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Recycle-Pak (Scottish Environment Protection Agency)"
                        },
                        new
                        {
                            Id = 28,
                            CompaniesHouseNumber = "04748329",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Recycling Lives Compliance Services",
                            NationId = 1
                        },
                        new
                        {
                            Id = 29,
                            CompaniesHouseNumber = "06355083",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "REPIC",
                            NationId = 1
                        },
                        new
                        {
                            Id = 30,
                            CompaniesHouseNumber = "06355083",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = true,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "REPIC NI"
                        },
                        new
                        {
                            Id = 31,
                            CompaniesHouseNumber = "04015442",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Smart Comply (EA)",
                            NationId = 1
                        },
                        new
                        {
                            Id = 32,
                            CompaniesHouseNumber = "04015442",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = true,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Smart Comply (Northern Ireland Environment Agency)"
                        },
                        new
                        {
                            Id = 33,
                            CompaniesHouseNumber = "04835772",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Synergy Compliance",
                            NationId = 1
                        },
                        new
                        {
                            Id = 34,
                            CompaniesHouseNumber = "04835772",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = true,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Synergy Compliance (Northern Ireland Environment Agency)"
                        },
                        new
                        {
                            Id = 35,
                            CompaniesHouseNumber = "06929701",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Ethical Compliance",
                            NationId = 1
                        },
                        new
                        {
                            Id = 36,
                            CompaniesHouseNumber = "06929701",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Pennine-Pack",
                            NationId = 1
                        },
                        new
                        {
                            Id = 37,
                            CompaniesHouseNumber = "06929701",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = true,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Pennine-Pack (Northern Ireland Environment Agency)"
                        },
                        new
                        {
                            Id = 38,
                            CompaniesHouseNumber = "03985811",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = true,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Wastepack (Scottish Environment Protection Agency)"
                        },
                        new
                        {
                            Id = 39,
                            CompaniesHouseNumber = "03985811",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = true,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Wastepack UK (Northern Ireland Environment Agency)"
                        },
                        new
                        {
                            Id = 40,
                            CompaniesHouseNumber = "07688691",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Valpak",
                            NationId = 1
                        },
                        new
                        {
                            Id = 41,
                            CompaniesHouseNumber = "07688691",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = true,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Valpak (Northern Ireland Environment Agency)"
                        },
                        new
                        {
                            Id = 42,
                            CompaniesHouseNumber = "SC245145",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Valpak Scotland Ltd (SEPA)",
                            NationId = 3
                        },
                        new
                        {
                            Id = 43,
                            CompaniesHouseNumber = "02215767",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = true,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Veolia Environmental Services (Northern Ireland Environment Agency)"
                        },
                        new
                        {
                            Id = 44,
                            CompaniesHouseNumber = "06043169",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Packcare",
                            NationId = 1
                        },
                        new
                        {
                            Id = 45,
                            CompaniesHouseNumber = "SC174113",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = true,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Compliance Link (Scottish Environment Protection Agency)"
                        },
                        new
                        {
                            Id = 46,
                            CompaniesHouseNumber = "SC174113",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = true,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "SWS Compak"
                        },
                        new
                        {
                            Id = 47,
                            CompaniesHouseNumber = "SC174113",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Wastepack GB (SEPA)",
                            NationId = 3
                        },
                        new
                        {
                            Id = 48,
                            CompaniesHouseNumber = "04168907",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Enpack",
                            NationId = 1
                        },
                        new
                        {
                            Id = 49,
                            CompaniesHouseNumber = "SC300070",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Leafpak",
                            NationId = 2
                        },
                        new
                        {
                            Id = 50,
                            CompaniesHouseNumber = "03985811",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Wastepack (EA)",
                            NationId = 1
                        },
                        new
                        {
                            Id = 51,
                            CompaniesHouseNumber = "05695937",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Beyondly (NIEA)",
                            NationId = 2
                        },
                        new
                        {
                            Id = 52,
                            CompaniesHouseNumber = "00946107",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "BiffPack (NIEA)",
                            NationId = 2
                        },
                        new
                        {
                            Id = 53,
                            CompaniesHouseNumber = "04559478",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Comply with Clarity (NIEA)",
                            NationId = 2
                        },
                        new
                        {
                            Id = 54,
                            CompaniesHouseNumber = "SC331930",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Co2 Compliance (NIEA)",
                            NationId = 2
                        },
                        new
                        {
                            Id = 55,
                            CompaniesHouseNumber = "04164355",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "ComplyPak (NIEA)",
                            NationId = 2
                        },
                        new
                        {
                            Id = 56,
                            CompaniesHouseNumber = "04713606",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Ecosurety (NIEA)",
                            NationId = 2
                        },
                        new
                        {
                            Id = 57,
                            CompaniesHouseNumber = "05859725",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "ERP (NIEA)",
                            NationId = 2
                        },
                        new
                        {
                            Id = 58,
                            CompaniesHouseNumber = "04592964",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Kite Environmental Solutions (NIEA)",
                            NationId = 2
                        },
                        new
                        {
                            Id = 59,
                            CompaniesHouseNumber = "SC300070",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Leafpak (NIEA)",
                            NationId = 2
                        },
                        new
                        {
                            Id = 60,
                            CompaniesHouseNumber = "07699232",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Paperpak (NIEA)",
                            NationId = 2
                        },
                        new
                        {
                            Id = 61,
                            CompaniesHouseNumber = "03417947",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Veolia (NIEA)",
                            NationId = 2
                        },
                        new
                        {
                            Id = 62,
                            CompaniesHouseNumber = "04748329",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Recycling Lives Compliance Services (NIEA)",
                            NationId = 2
                        },
                        new
                        {
                            Id = 63,
                            CompaniesHouseNumber = "06355083",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "REPIC (NIEA)",
                            NationId = 2
                        },
                        new
                        {
                            Id = 64,
                            CompaniesHouseNumber = "04015442",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Smart Comply (NIEA)",
                            NationId = 2
                        },
                        new
                        {
                            Id = 65,
                            CompaniesHouseNumber = "04835772",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Synergy Compliance (Northern Ireland Environment Agency)",
                            NationId = 2
                        },
                        new
                        {
                            Id = 66,
                            CompaniesHouseNumber = "06929701",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Pennine-Pack (Northern Ireland Environment Agency)",
                            NationId = 2
                        },
                        new
                        {
                            Id = 67,
                            CompaniesHouseNumber = "03985811",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Wastepack UK (NIEA)",
                            NationId = 2
                        },
                        new
                        {
                            Id = 68,
                            CompaniesHouseNumber = "07688691",
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Valpak (NIEA)",
                            NationId = 2
                        });
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.ComplianceSchemeMemberRemovalAuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ComplianceSchemeId")
                        .HasColumnType("int");

                    b.Property<int>("MemberOrganisationId")
                        .HasColumnType("int");

                    b.Property<string>("ReasonDescription")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<Guid>("RemovedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("RemovedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<int>("SchemeOrganisationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComplianceSchemeId");

                    b.HasIndex("MemberOrganisationId");

                    b.HasIndex("SchemeOrganisationId");

                    b.ToTable("ComplianceSchemeMemberRemovalAuditLogs");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.ComplianceSchemeMemberRemovalAuditLogsReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuditLogId")
                        .HasColumnType("int");

                    b.Property<int>("ReasonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuditLogId");

                    b.HasIndex("ReasonId");

                    b.ToTable("ComplianceSchemeMemberRemovalAuditLogsReasons");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.ComplianceSchemeMemberRemovalReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("RequiresReason")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("ComplianceSchemeMemberRemovalReasons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "A",
                            DisplayOrder = 1,
                            IsActive = true,
                            Name = "It won't be able to give us its organisation details or packaging data by the deadline",
                            RequiresReason = false
                        },
                        new
                        {
                            Id = 2,
                            Code = "B",
                            DisplayOrder = 2,
                            IsActive = true,
                            Name = "The amount of packaging it handled in the threshold calculation year is less than or equal to 25 tonnes",
                            RequiresReason = false
                        },
                        new
                        {
                            Id = 3,
                            Code = "C",
                            DisplayOrder = 3,
                            IsActive = true,
                            Name = "It has ended its membership with this scheme",
                            RequiresReason = false
                        },
                        new
                        {
                            Id = 4,
                            Code = "D",
                            DisplayOrder = 4,
                            IsActive = true,
                            Name = "It has merged with another company",
                            RequiresReason = false
                        },
                        new
                        {
                            Id = 5,
                            Code = "E",
                            DisplayOrder = 5,
                            IsActive = true,
                            Name = "It is no longer in operation",
                            RequiresReason = true
                        },
                        new
                        {
                            Id = 6,
                            Code = "F",
                            DisplayOrder = 6,
                            IsActive = true,
                            Name = "It has gone into administration",
                            RequiresReason = false
                        },
                        new
                        {
                            Id = 7,
                            Code = "G",
                            DisplayOrder = 7,
                            IsActive = true,
                            Name = "It is now a subsidiary of another company",
                            RequiresReason = false
                        },
                        new
                        {
                            Id = 8,
                            Code = "H",
                            DisplayOrder = 8,
                            IsActive = true,
                            Name = "Its turnover in the last financial year before the relevant date is less than or equal to £1 million",
                            RequiresReason = false
                        },
                        new
                        {
                            Id = 9,
                            Code = "I",
                            DisplayOrder = 9,
                            IsActive = true,
                            Name = "We've ended its membership with this scheme",
                            RequiresReason = false
                        },
                        new
                        {
                            Id = 10,
                            Code = "J",
                            DisplayOrder = 10,
                            IsActive = true,
                            Name = "None of the above",
                            RequiresReason = true
                        });
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.DelegatedPersonEnrolment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ComplianceSchemeName")
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)");

                    b.Property<string>("ConsultancyName")
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<int>("EnrolmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<string>("NominatorDeclaration")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("NominatorDeclarationTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("NominatorEnrolmentId")
                        .HasColumnType("int");

                    b.Property<string>("NomineeDeclaration")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("NomineeDeclarationTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("OtherOrganisationName")
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)");

                    b.Property<string>("OtherRelationshipDescription")
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)");

                    b.Property<string>("RelationshipType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("EnrolmentId")
                        .IsUnique();

                    b.HasIndex("NominatorEnrolmentId");

                    b.ToTable("DelegatedPersonEnrolments");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.Enrolment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConnectionId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<int>("EnrolmentStatusId")
                        .HasColumnType("int");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<int>("ServiceRoleId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ValidFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ValidTo")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ConnectionId");

                    b.HasIndex("EnrolmentStatusId");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("ServiceRoleId");

                    b.ToTable("Enrolments");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.EnrolmentReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("APContact")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("AP Contact");

                    b.Property<string>("APEmail")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("AP Email");

                    b.Property<string>("APFirstName")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("AP First Name");

                    b.Property<string>("APLastName")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("AP Last Name");

                    b.Property<string>("APPosition")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("AP Position");

                    b.Property<string>("ActionedBy")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Actioned By");

                    b.Property<DateTime?>("ActionedDate")
                        .HasColumnType("date")
                        .HasColumnName("Actioned Date");

                    b.Property<int?>("BatchNo")
                        .HasColumnType("int");

                    b.Property<string>("CompaniesHouseNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Companies House Number");

                    b.Property<string>("ComplianceSchemeName")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Compliance Scheme Name");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<string>("DPContact")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DP Contact");

                    b.Property<string>("DPEmail")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DP Email");

                    b.Property<string>("DPFirstName")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DP First Name");

                    b.Property<string>("DPLastName")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DP Last Name");

                    b.Property<string>("DPNatureOfRelationship")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DP Nature Of Relationship");

                    b.Property<string>("DPPosition")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DP Position");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("date")
                        .HasColumnName("Due date");

                    b.Property<string>("EnrolmentId")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Enrolment Id");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsProcessed")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsValid")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<string>("NationOfEnrolment")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Nation Of Enrolment");

                    b.Property<string>("OrganisationId")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Organisation ID");

                    b.Property<string>("OrganisationName")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Org Name");

                    b.Property<string>("OrganisationType")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Org Type");

                    b.Property<string>("PcsOrDirectProducer")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PCS or Direct producer?");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RegulatorDecisionDate")
                        .HasColumnType("date")
                        .HasColumnName("Date");

                    b.Property<string>("RegulatorRejectionComments")
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Regulator Rejection Comments");

                    b.Property<string>("RegulatorStatus")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Regulator Status");

                    b.Property<string>("RegulatorUserName")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Regulator User Name");

                    b.Property<string>("RequestType")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Request Type");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Status");

                    b.Property<DateTime?>("SubmittedDate")
                        .HasColumnType("date")
                        .HasColumnName("Submitted Date");

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.ToTable("EnrolmentReport");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.EnrolmentStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("EnrolmentStatuses");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Not Set"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Enrolled"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Approved"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Rejected"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Invited"
                        },
                        new
                        {
                            Id = 6,
                            Name = "On Hold"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Nominated"
                        });
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.InterOrganisationRole", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("InterOrganisationRoles");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Not Set"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Producer"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Compliance Scheme"
                        });
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.InterPersonRole", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("InterPersonRoles");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.LaOrganisation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<string>("DistrictCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId")
                        .IsUnique();

                    b.ToTable("LaOrganisations");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.LeaverCode", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("ReasonsForLeaving")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("LeaverCodes");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Key = "",
                            ReasonsForLeaving = "Not Set"
                        },
                        new
                        {
                            Id = 1,
                            Key = "A",
                            ReasonsForLeaving = "Administration/Receivership"
                        },
                        new
                        {
                            Id = 2,
                            Key = "B",
                            ReasonsForLeaving = "Liquidation/dissolution"
                        },
                        new
                        {
                            Id = 3,
                            Key = "C",
                            ReasonsForLeaving = "Dropped below turnover threshold"
                        },
                        new
                        {
                            Id = 4,
                            Key = "D",
                            ReasonsForLeaving = "Dropped below tonnage threshold"
                        },
                        new
                        {
                            Id = 5,
                            Key = "E",
                            ReasonsForLeaving = "Resignation (not incapacity related)"
                        },
                        new
                        {
                            Id = 6,
                            Key = "F",
                            ReasonsForLeaving = "Scheme has terminated membership (not incapacity related)"
                        },
                        new
                        {
                            Id = 7,
                            Key = "G",
                            ReasonsForLeaving = "Business closure (not incapacity related)"
                        },
                        new
                        {
                            Id = 8,
                            Key = "H",
                            ReasonsForLeaving = "Bankruptcy"
                        },
                        new
                        {
                            Id = 9,
                            Key = "I",
                            ReasonsForLeaving = "Merged with another company (not incapacity related)"
                        },
                        new
                        {
                            Id = 10,
                            Key = "J",
                            ReasonsForLeaving = "Now a subsidiary of another company (not incapacity related)"
                        },
                        new
                        {
                            Id = 11,
                            Key = "K",
                            ReasonsForLeaving = "Not ready to register by 15th April"
                        },
                        new
                        {
                            Id = 12,
                            Key = "L",
                            ReasonsForLeaving = "No longer obligated (Not threshold related)"
                        });
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.Nation", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(54)
                        .HasColumnType("nvarchar(54)");

                    b.Property<string>("NationCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Nations");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Not Set",
                            NationCode = ""
                        },
                        new
                        {
                            Id = 1,
                            Name = "England",
                            NationCode = "GB-ENG"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Northern Ireland",
                            NationCode = "GB-NIR"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Scotland",
                            NationCode = "GB-SCT"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Wales",
                            NationCode = "GB-WLS"
                        });
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.OfflineApprovalErrorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<DateTime>("Error_Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Error_Line")
                        .HasColumnType("int");

                    b.Property<string>("Error_Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Error_Number")
                        .HasColumnType("int");

                    b.Property<string>("Error_Procedure")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Error_Severity")
                        .HasColumnType("int");

                    b.Property<int>("Error_State")
                        .HasColumnType("int");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.ToTable("OfflineApprovalErrorLog");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.Organisation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BuildingName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BuildingNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CompaniesHouseNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Country")
                        .HasMaxLength(54)
                        .HasColumnType("nvarchar(54)");

                    b.Property<string>("County")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<string>("DependentLocality")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("IsComplianceScheme")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<string>("Locality")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)");

                    b.Property<int?>("NationId")
                        .HasColumnType("int");

                    b.Property<int>("OrganisationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Postcode")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("ProducerTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceNumber")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValueSql("NEXT VALUE FOR OrganisationReferenceNumber");

                    b.Property<string>("Street")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubBuildingName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Town")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("TradingName")
                        .HasMaxLength(170)
                        .HasColumnType("nvarchar(170)");

                    b.Property<int?>("TransferNationId")
                        .HasColumnType("int");

                    b.Property<bool>("ValidatedWithCompaniesHouse")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompaniesHouseNumber")
                        .HasFilter("[CompaniesHouseNumber] IS NOT NULL");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("NationId");

                    b.HasIndex("OrganisationTypeId");

                    b.HasIndex("ProducerTypeId");

                    b.HasIndex("ReferenceNumber")
                        .HasFilter("[IsDeleted] = CAST(0 AS bit)");

                    b.HasIndex("TransferNationId");

                    b.HasIndex("Name", "ReferenceNumber", "NationId")
                        .HasDatabaseName("IX_Name_ReferenceNumber_NationId")
                        .HasFilter("[OrganisationTypeId] <> 6 AND [IsDeleted] = CAST(0 AS bit)");

                    b.ToTable("Organisations");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.OrganisationRegistrationType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("OrganisationRegistrationTypes");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Key = "",
                            Name = "Not Set"
                        },
                        new
                        {
                            Id = 1,
                            Key = "GR",
                            Name = "Group"
                        },
                        new
                        {
                            Id = 2,
                            Key = "IN",
                            Name = "Individual"
                        });
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.OrganisationRelationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CodeStatusConfigId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<int>("FirstOrganisationId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("JoinerDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LastUpdatedById")
                        .HasColumnType("int");

                    b.Property<int>("LastUpdatedByOrganisationId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<int?>("LeaverCodeId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("LeaverDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("OrganisationChangeReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrganisationRegistrationTypeId")
                        .HasColumnType("int");

                    b.Property<int>("OrganisationRelationshipTypeId")
                        .HasColumnType("int");

                    b.Property<string>("RelationExpiryReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RelationFromDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<DateTime?>("RelationToDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SecondOrganisationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CodeStatusConfigId");

                    b.HasIndex("FirstOrganisationId");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("LeaverCodeId");

                    b.HasIndex("OrganisationRegistrationTypeId");

                    b.HasIndex("OrganisationRelationshipTypeId");

                    b.HasIndex("SecondOrganisationId");

                    b.ToTable("OrganisationRelationships");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.OrganisationRelationshipType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("OrganisationRelationshipTypes");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Not Set"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Parent"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Child"
                        });
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.OrganisationToPartnerRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.Property<int>("PartnerRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("PartnerRoleId");

                    b.ToTable("OrganisationToPartnerRoles");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.OrganisationToPersonRole", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("OrganisationToPersonRoles");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Not Set"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Employer"
                        });
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.OrganisationType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("OrganisationTypes");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Not Set"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Companies House Company"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Non Companies House Company"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Waste Collection Authority"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Waste Disposal Authority"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Waste Collection Authority & Waste Disposal Authority"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Regulators"
                        });
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.OrganisationsConnection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int>("FromOrganisationId")
                        .HasColumnType("int");

                    b.Property<int>("FromOrganisationRoleId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<int>("ToOrganisationId")
                        .HasColumnType("int");

                    b.Property<int>("ToOrganisationRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("FromOrganisationId");

                    b.HasIndex("FromOrganisationRoleId");

                    b.HasIndex("ToOrganisationId");

                    b.HasIndex("ToOrganisationRoleId");

                    b.ToTable("OrganisationsConnections");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.PartnerRole", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("PartnerRoles");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Not Set"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Individual Partner"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Corporate Partner"
                        });
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.PersonInOrganisationRole", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("PersonInOrganisationRoles");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Not Set"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Employee"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Member"
                        });
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.PersonOrganisationConnection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("JobTitle")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.Property<int>("OrganisationRoleId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("PersonRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("OrganisationId");

                    b.HasIndex("OrganisationRoleId");

                    b.HasIndex("PersonId");

                    b.HasIndex("PersonRoleId");

                    b.ToTable("PersonOrganisationConnections");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.PersonOrganisationConnectionInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("InviteToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvitedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("InviteePersonId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("InvitedByUserId");

                    b.HasIndex("InviteePersonId");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("ServiceId");

                    b.ToTable("PersonOrganisationConnectionInvites");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.PersonsConnection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int>("FromPersonId")
                        .HasColumnType("int");

                    b.Property<int>("FromPersonRoleId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<int>("ToPersonId")
                        .HasColumnType("int");

                    b.Property<int>("ToPersonRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("FromPersonId");

                    b.HasIndex("FromPersonRoleId");

                    b.HasIndex("ToPersonId");

                    b.HasIndex("ToPersonRoleId");

                    b.ToTable("PersonsConnections");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.ProducerType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ProducerTypes");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Not Set"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Partnership"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Unincorporated body"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Non-UK organisation"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Sole trader"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Other"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Limited partnership"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Limited Liability partnership"
                        });
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.RegulatorComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<int>("EnrolmentId")
                        .HasColumnType("int");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<string>("OnHoldComments")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("RejectedComments")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TransferComments")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("EnrolmentId");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("PersonId");

                    b.ToTable("RegulatorComments");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.ScenarioReference", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<string>("ObligationFlag")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ScenarioCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.ToTable("ScenarioReferences");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Active = true,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Not Set",
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ObligationFlag = "Not Set",
                            ScenarioCode = "Not Set"
                        },
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Threshold producer joins a group",
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ObligationFlag = "Obligated",
                            ScenarioCode = "1b"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Threshold producer joins a group",
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ObligationFlag = "Obligated",
                            ScenarioCode = "5b"
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Below-threshold producer joins group (% obligation)",
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ObligationFlag = "Obligated",
                            ScenarioCode = "2a"
                        },
                        new
                        {
                            Id = 4,
                            Active = true,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Below-threshold producer joins group (% obligation)",
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ObligationFlag = "Obligated",
                            ScenarioCode = "2b"
                        },
                        new
                        {
                            Id = 5,
                            Active = true,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Meets thresholds but group responsible for obligation",
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ObligationFlag = "Obligated",
                            ScenarioCode = "3b"
                        },
                        new
                        {
                            Id = 6,
                            Active = true,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Leaves group, holding company responsible",
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ObligationFlag = "Obligated",
                            ScenarioCode = "4a"
                        },
                        new
                        {
                            Id = 7,
                            Active = true,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Leaves group, holding company responsible",
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ObligationFlag = "Obligated",
                            ScenarioCode = "4b"
                        },
                        new
                        {
                            Id = 8,
                            Active = true,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Joined group mid-year, not obligated",
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ObligationFlag = "Not Obligated",
                            ScenarioCode = "5d"
                        },
                        new
                        {
                            Id = 9,
                            Active = true,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Left group mid-year, HC still responsible",
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ObligationFlag = "Obligated",
                            ScenarioCode = "5d"
                        },
                        new
                        {
                            Id = 10,
                            Active = true,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Joined group, not obligated",
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ObligationFlag = "Not Obligated",
                            ScenarioCode = "5c"
                        },
                        new
                        {
                            Id = 11,
                            Active = true,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Left group, HC still responsible",
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ObligationFlag = "Obligated",
                            ScenarioCode = "5c"
                        },
                        new
                        {
                            Id = 12,
                            Active = true,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Producer no longer obligated – insolvency or ceased function",
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ObligationFlag = "Not Obligated – HC",
                            ScenarioCode = "none"
                        },
                        new
                        {
                            Id = 13,
                            Active = true,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Resigned from compliance scheme",
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ObligationFlag = "Not Obligated – CS",
                            ScenarioCode = "none"
                        },
                        new
                        {
                            Id = 14,
                            Active = true,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Compliance scheme terminated membership",
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ObligationFlag = "Not Obligated – CS",
                            ScenarioCode = "none"
                        },
                        new
                        {
                            Id = 16,
                            Active = true,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Merged with another company – non-incapacity, CS only",
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ObligationFlag = "Not Obligated – CS",
                            ScenarioCode = "none"
                        },
                        new
                        {
                            Id = 17,
                            Active = true,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Producer data changed (e.g. acquisition of insolvent entity)",
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ObligationFlag = "Obligated",
                            ScenarioCode = "none"
                        },
                        new
                        {
                            Id = 18,
                            Active = true,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Producer who meets thresholds independently has left group. Holding Company remains responsible for obligation due to Mid Year change",
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ObligationFlag = "Not Obligated",
                            ScenarioCode = "all"
                        },
                        new
                        {
                            Id = 19,
                            Active = true,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Producer Registered late.",
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ObligationFlag = "Obligated",
                            ScenarioCode = "all"
                        },
                        new
                        {
                            Id = 20,
                            Active = true,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Other - Joiner",
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ObligationFlag = "Obligated",
                            ScenarioCode = "all"
                        },
                        new
                        {
                            Id = 21,
                            Active = true,
                            CreatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Other - Leaver",
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ObligationFlag = "Not Obligated",
                            ScenarioCode = "all"
                        });
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.SelectedScheme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ComplianceSchemeId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<int>("OrganisationConnectionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComplianceSchemeId");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("OrganisationConnectionId");

                    b.ToTable("SelectedSchemes");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Extended Producer Responsibility - Packaging",
                            Key = "Packaging",
                            Name = "EPR Packaging"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Extended Producer Responsibility - Regulating",
                            Key = "Regulating",
                            Name = "EPR Regulating"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Local Authority Payment Service",
                            Key = "LaPayment",
                            Name = "Local Authority Payment Service"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Extended Producer Responsibility For Packaging: Reprocessors And Exporters",
                            Key = "ReprocessorExporter",
                            Name = "EPR for packaging: reprocessors and exporters"
                        });
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.ServiceRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Key = "Packaging.ApprovedPerson",
                            Name = "Approved Person",
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 2,
                            Key = "Packaging.DelegatedPerson",
                            Name = "Delegated Person",
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 3,
                            Key = "Packaging.BasicUser",
                            Name = "Basic User",
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 4,
                            Description = "Regulator Admin Service Role",
                            Key = "Regulator.Admin",
                            Name = "Regulator Admin",
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 5,
                            Description = "Regulator Basic Service Role",
                            Key = "Regulator.Basic",
                            Name = "Regulator Basic",
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 6,
                            Key = "LaPayment.UserAdministrator",
                            Name = "User Administrator",
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 7,
                            Key = "LaPayment.BasicUser",
                            Name = "Basic User",
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 8,
                            Description = "Manage team, submit registration and accreditation",
                            Key = "Re-Ex.ApprovedPerson",
                            Name = "Approved Person",
                            ServiceId = 4
                        },
                        new
                        {
                            Id = 9,
                            Key = "Re-Ex.DelegatedPerson",
                            Name = "Delegated Person",
                            ServiceId = 4
                        },
                        new
                        {
                            Id = 10,
                            Description = "Read only",
                            Key = "Re-Ex.BasicUser",
                            Name = "Basic User",
                            ServiceId = 4
                        },
                        new
                        {
                            Id = 11,
                            Description = "Manage team, submit registration and accreditation",
                            Key = "Re-Ex.AdminUser",
                            Name = "Admin User",
                            ServiceId = 4
                        },
                        new
                        {
                            Id = 12,
                            Description = "Submit registration and apply for accreditation",
                            Key = "Re-Ex.StandardUser",
                            Name = "Standard User",
                            ServiceId = 4
                        });
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.SubsidiaryOrganisation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.Property<string>("SubsidiaryId")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("SubsidiaryOrganisations");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<string>("ExternalIdpId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("External Provider Identity ID");

                    b.Property<string>("ExternalIdpUserId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("External Provider Identity User ID");

                    b.Property<string>("InviteToken")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("InvitedBy")
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("UserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[IsDeleted] = CAST(0 AS bit) AND [UserId] <> CAST(0x0 AS UNIQUEIDENTIFIER)");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.ApprovedPersonEnrolment", b =>
                {
                    b.HasOne("BackendAccountService.Data.Entities.Enrolment", "Enrolment")
                        .WithOne("ApprovedPersonEnrolment")
                        .HasForeignKey("BackendAccountService.Data.Entities.ApprovedPersonEnrolment", "EnrolmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Enrolment");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.ChangeHistory", b =>
                {
                    b.HasOne("BackendAccountService.Data.Entities.User", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BackendAccountService.Data.Entities.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendAccountService.Data.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApprovedBy");

                    b.Navigation("Organisation");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.CodeScenarioMapping", b =>
                {
                    b.HasOne("BackendAccountService.Data.Entities.CodeStatusConfig", "CodeStatusConfig")
                        .WithMany()
                        .HasForeignKey("CodeStatusConfigId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendAccountService.Data.Entities.ScenarioReference", "ScenarioReference")
                        .WithMany()
                        .HasForeignKey("ScenarioReferenceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CodeStatusConfig");

                    b.Navigation("ScenarioReference");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.CodeStatusConfig", b =>
                {
                    b.HasOne("BackendAccountService.Data.Entities.CodeClassificationLookup", "CodeClassificationLookup")
                        .WithMany()
                        .HasForeignKey("ClassificationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CodeClassificationLookup");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.ComplianceScheme", b =>
                {
                    b.HasOne("BackendAccountService.Data.Entities.Nation", "Nation")
                        .WithMany()
                        .HasForeignKey("NationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Nation");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.ComplianceSchemeMemberRemovalAuditLog", b =>
                {
                    b.HasOne("BackendAccountService.Data.Entities.ComplianceScheme", "ComplianceScheme")
                        .WithMany()
                        .HasForeignKey("ComplianceSchemeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendAccountService.Data.Entities.Organisation", "MemberOrganisation")
                        .WithMany()
                        .HasForeignKey("MemberOrganisationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendAccountService.Data.Entities.Organisation", "SchemeOrganisation")
                        .WithMany()
                        .HasForeignKey("SchemeOrganisationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ComplianceScheme");

                    b.Navigation("MemberOrganisation");

                    b.Navigation("SchemeOrganisation");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.ComplianceSchemeMemberRemovalAuditLogsReason", b =>
                {
                    b.HasOne("BackendAccountService.Data.Entities.ComplianceSchemeMemberRemovalAuditLog", "AuditLog")
                        .WithMany()
                        .HasForeignKey("AuditLogId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendAccountService.Data.Entities.ComplianceSchemeMemberRemovalReason", "Reason")
                        .WithMany()
                        .HasForeignKey("ReasonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AuditLog");

                    b.Navigation("Reason");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.DelegatedPersonEnrolment", b =>
                {
                    b.HasOne("BackendAccountService.Data.Entities.Enrolment", "Enrolment")
                        .WithOne("DelegatedPersonEnrolment")
                        .HasForeignKey("BackendAccountService.Data.Entities.DelegatedPersonEnrolment", "EnrolmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendAccountService.Data.Entities.Enrolment", "NominatorEnrolment")
                        .WithMany()
                        .HasForeignKey("NominatorEnrolmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Enrolment");

                    b.Navigation("NominatorEnrolment");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.Enrolment", b =>
                {
                    b.HasOne("BackendAccountService.Data.Entities.PersonOrganisationConnection", "Connection")
                        .WithMany("Enrolments")
                        .HasForeignKey("ConnectionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendAccountService.Data.Entities.EnrolmentStatus", "EnrolmentStatus")
                        .WithMany()
                        .HasForeignKey("EnrolmentStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendAccountService.Data.Entities.ServiceRole", "ServiceRole")
                        .WithMany()
                        .HasForeignKey("ServiceRoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Connection");

                    b.Navigation("EnrolmentStatus");

                    b.Navigation("ServiceRole");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.LaOrganisation", b =>
                {
                    b.HasOne("BackendAccountService.Data.Entities.Organisation", "Organisation")
                        .WithOne()
                        .HasForeignKey("BackendAccountService.Data.Entities.LaOrganisation", "OrganisationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.Organisation", b =>
                {
                    b.HasOne("BackendAccountService.Data.Entities.Nation", "Nation")
                        .WithMany()
                        .HasForeignKey("NationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BackendAccountService.Data.Entities.OrganisationType", "OrganisationType")
                        .WithMany()
                        .HasForeignKey("OrganisationTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendAccountService.Data.Entities.ProducerType", "ProducerType")
                        .WithMany()
                        .HasForeignKey("ProducerTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BackendAccountService.Data.Entities.Nation", "TransferNation")
                        .WithMany()
                        .HasForeignKey("TransferNationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Nation");

                    b.Navigation("OrganisationType");

                    b.Navigation("ProducerType");

                    b.Navigation("TransferNation");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.OrganisationRelationship", b =>
                {
                    b.HasOne("BackendAccountService.Data.Entities.CodeStatusConfig", "CodeStatusConfig")
                        .WithMany()
                        .HasForeignKey("CodeStatusConfigId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BackendAccountService.Data.Entities.Organisation", "FirstOrganisation")
                        .WithMany("OrganisationRelationships")
                        .HasForeignKey("FirstOrganisationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendAccountService.Data.Entities.User", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendAccountService.Data.Entities.LeaverCode", "LeaverCode")
                        .WithMany()
                        .HasForeignKey("LeaverCodeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BackendAccountService.Data.Entities.OrganisationRegistrationType", "OrganisationRegistrationType")
                        .WithMany()
                        .HasForeignKey("OrganisationRegistrationTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BackendAccountService.Data.Entities.OrganisationRelationshipType", "OrganisationRelationshipType")
                        .WithMany()
                        .HasForeignKey("OrganisationRelationshipTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendAccountService.Data.Entities.Organisation", "SecondOrganisation")
                        .WithMany()
                        .HasForeignKey("SecondOrganisationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CodeStatusConfig");

                    b.Navigation("FirstOrganisation");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("LeaverCode");

                    b.Navigation("OrganisationRegistrationType");

                    b.Navigation("OrganisationRelationshipType");

                    b.Navigation("SecondOrganisation");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.OrganisationToPartnerRole", b =>
                {
                    b.HasOne("BackendAccountService.Data.Entities.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendAccountService.Data.Entities.PartnerRole", "PartnerRole")
                        .WithMany()
                        .HasForeignKey("PartnerRoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Organisation");

                    b.Navigation("PartnerRole");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.OrganisationsConnection", b =>
                {
                    b.HasOne("BackendAccountService.Data.Entities.Organisation", "FromOrganisation")
                        .WithMany("FromOrganisationConnections")
                        .HasForeignKey("FromOrganisationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendAccountService.Data.Entities.InterOrganisationRole", "FromOrganisationRole")
                        .WithMany()
                        .HasForeignKey("FromOrganisationRoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendAccountService.Data.Entities.Organisation", "ToOrganisation")
                        .WithMany("ToOrganisationsConnections")
                        .HasForeignKey("ToOrganisationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendAccountService.Data.Entities.InterOrganisationRole", "ToOrganisationRole")
                        .WithMany()
                        .HasForeignKey("ToOrganisationRoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FromOrganisation");

                    b.Navigation("FromOrganisationRole");

                    b.Navigation("ToOrganisation");

                    b.Navigation("ToOrganisationRole");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.Person", b =>
                {
                    b.HasOne("BackendAccountService.Data.Entities.User", "User")
                        .WithOne("Person")
                        .HasForeignKey("BackendAccountService.Data.Entities.Person", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.PersonOrganisationConnection", b =>
                {
                    b.HasOne("BackendAccountService.Data.Entities.Organisation", "Organisation")
                        .WithMany("PersonOrganisationConnections")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendAccountService.Data.Entities.OrganisationToPersonRole", "OrganisationRole")
                        .WithMany()
                        .HasForeignKey("OrganisationRoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendAccountService.Data.Entities.Person", "Person")
                        .WithMany("OrganisationConnections")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendAccountService.Data.Entities.PersonInOrganisationRole", "PersonRole")
                        .WithMany()
                        .HasForeignKey("PersonRoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Organisation");

                    b.Navigation("OrganisationRole");

                    b.Navigation("Person");

                    b.Navigation("PersonRole");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.PersonOrganisationConnectionInvite", b =>
                {
                    b.HasOne("BackendAccountService.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("InvitedByUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendAccountService.Data.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("InviteePersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendAccountService.Data.Entities.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendAccountService.Data.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Organisation");

                    b.Navigation("Person");

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.PersonsConnection", b =>
                {
                    b.HasOne("BackendAccountService.Data.Entities.Person", "FromPerson")
                        .WithMany("FromPersonConnections")
                        .HasForeignKey("FromPersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendAccountService.Data.Entities.InterPersonRole", "FromPersonRole")
                        .WithMany()
                        .HasForeignKey("FromPersonRoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendAccountService.Data.Entities.Person", "ToPerson")
                        .WithMany("ToPersonConnections")
                        .HasForeignKey("ToPersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendAccountService.Data.Entities.InterPersonRole", "ToPersonRole")
                        .WithMany()
                        .HasForeignKey("ToPersonRoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FromPerson");

                    b.Navigation("FromPersonRole");

                    b.Navigation("ToPerson");

                    b.Navigation("ToPersonRole");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.RegulatorComment", b =>
                {
                    b.HasOne("BackendAccountService.Data.Entities.Enrolment", "Enrolment")
                        .WithMany("RegulatorComments")
                        .HasForeignKey("EnrolmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendAccountService.Data.Entities.Person", "Person")
                        .WithMany("RegulatorComments")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Enrolment");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.SelectedScheme", b =>
                {
                    b.HasOne("BackendAccountService.Data.Entities.ComplianceScheme", "ComplianceScheme")
                        .WithMany()
                        .HasForeignKey("ComplianceSchemeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendAccountService.Data.Entities.OrganisationsConnection", "OrganisationConnection")
                        .WithMany()
                        .HasForeignKey("OrganisationConnectionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ComplianceScheme");

                    b.Navigation("OrganisationConnection");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.ServiceRole", b =>
                {
                    b.HasOne("BackendAccountService.Data.Entities.Service", "Service")
                        .WithMany("ServiceRoles")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.SubsidiaryOrganisation", b =>
                {
                    b.HasOne("BackendAccountService.Data.Entities.Organisation", "Organisation")
                        .WithMany("SubsidiaryOrganisations")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.Enrolment", b =>
                {
                    b.Navigation("ApprovedPersonEnrolment");

                    b.Navigation("DelegatedPersonEnrolment");

                    b.Navigation("RegulatorComments");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.Organisation", b =>
                {
                    b.Navigation("FromOrganisationConnections");

                    b.Navigation("OrganisationRelationships");

                    b.Navigation("PersonOrganisationConnections");

                    b.Navigation("SubsidiaryOrganisations");

                    b.Navigation("ToOrganisationsConnections");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.Person", b =>
                {
                    b.Navigation("FromPersonConnections");

                    b.Navigation("OrganisationConnections");

                    b.Navigation("RegulatorComments");

                    b.Navigation("ToPersonConnections");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.PersonOrganisationConnection", b =>
                {
                    b.Navigation("Enrolments");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.Service", b =>
                {
                    b.Navigation("ServiceRoles");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.User", b =>
                {
                    b.Navigation("Person")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
