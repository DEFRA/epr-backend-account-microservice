// <auto-generated />
using System;
using BackendAccountService.Data.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackendAccountService.Data.Migrations
{
    [DbContext(typeof(AccountsDbContext))]
    [Migration("20230331143320_AddInvitedEnrolmentStatus")]
    partial class AddInvitedEnrolmentStatus
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.HasSequence<int>("OrganisationReferenceNumber")
                .StartsAt(100001L);

            modelBuilder.Entity("BackendAccountService.Data.Entities.ComplianceScheme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("ComplianceSchemes");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.Enrolment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ConnectionId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("EnrolmentStatusId")
                        .HasColumnType("int");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("ServiceRoleId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ValidFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ValidTo")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ConnectionId");

                    b.HasIndex("EnrolmentStatusId");

                    b.HasIndex("ServiceRoleId");

                    b.ToTable("Enrolments");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.EnrolmentStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("EnrolmentStatuses");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Not Set"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Enrolled"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Approved"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Rejected"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Invited"
                        });
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.InterOrganisationRole", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("InterOrganisationRoles");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Not Set"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Producer"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Compliance Scheme"
                        });
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.InterPersonRole", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("InterPersonRoles");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.Nation", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(54)
                        .HasColumnType("nvarchar(54)");

                    b.HasKey("Id");

                    b.ToTable("Nations");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Not Set"
                        },
                        new
                        {
                            Id = 1,
                            Name = "England"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Northern Ireland"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Scotland"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Wales"
                        });
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.Organisation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BuildingName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BuildingNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CompaniesHouseNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Country")
                        .HasMaxLength(54)
                        .HasColumnType("nvarchar(54)");

                    b.Property<string>("County")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("DependentLocality")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("IsComplianceScheme")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Locality")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)");

                    b.Property<int?>("NationId")
                        .HasColumnType("int");

                    b.Property<int>("OrganisationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Postcode")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("ReferenceNumber")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValueSql("NEXT VALUE FOR OrganisationReferenceNumber");

                    b.Property<string>("Street")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubBuildingName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Town")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("TradingName")
                        .HasMaxLength(170)
                        .HasColumnType("nvarchar(170)");

                    b.Property<bool>("ValidatedWithCompaniesHouse")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NationId");

                    b.HasIndex("OrganisationTypeId");

                    b.ToTable("Organisations");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.OrganisationsConnection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int>("FromOrganisationId")
                        .HasColumnType("int");

                    b.Property<int>("FromOrganisationRoleId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("ToOrganisationId")
                        .HasColumnType("int");

                    b.Property<int>("ToOrganisationRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FromOrganisationId");

                    b.HasIndex("FromOrganisationRoleId");

                    b.HasIndex("ToOrganisationId");

                    b.HasIndex("ToOrganisationRoleId");

                    b.ToTable("OrganisationsConnections");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.OrganisationToPersonRole", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("OrganisationToPersonRoles");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Not Set"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Employer"
                        });
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.OrganisationType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("OrganisationTypes");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Not Set"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Limited Company"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Sole Trader"
                        });
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.PersonInOrganisationRole", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("PersonInOrganisationRoles");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Not Set"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Employee"
                        });
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.PersonOrganisationConnection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("JobTitle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.Property<int>("OrganisationRoleId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("PersonRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("OrganisationRoleId");

                    b.HasIndex("PersonId");

                    b.HasIndex("PersonRoleId");

                    b.ToTable("PersonOrganisationConnections");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.PersonsConnection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FromPersonId")
                        .HasColumnType("int");

                    b.Property<int>("FromPersonRoleId")
                        .HasColumnType("int");

                    b.Property<int>("ToPersonId")
                        .HasColumnType("int");

                    b.Property<int>("ToPersonRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FromPersonId");

                    b.HasIndex("FromPersonRoleId");

                    b.HasIndex("ToPersonId");

                    b.HasIndex("ToPersonRoleId");

                    b.ToTable("PersonsConnections");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.SelectedScheme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ComplianceSchemeId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("OrganisationConnectionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComplianceSchemeId");

                    b.HasIndex("OrganisationConnectionId");

                    b.ToTable("SelectedSchemes");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Extended Producer Responsibility - Packaging",
                            Key = "Packaging",
                            Name = "EPR Packaging"
                        });
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.ServiceRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Key = "Packaging.ApprovedPerson",
                            Name = "Approved Person",
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 2,
                            Key = "Packaging.DelegatedPerson",
                            Name = "Delegated Person",
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 3,
                            Key = "Packaging.BasicUser",
                            Name = "Basic User",
                            ServiceId = 1
                        });
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<string>("ExternalIdpId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("External Provider Identity ID");

                    b.Property<string>("ExternalIdpUserId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("External Provider Identity User ID");

                    b.Property<string>("InviteToken")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("InvitedBy")
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[IsDeleted] = CAST(0 AS bit) AND [UserId] <> CAST(0x0 AS UNIQUEIDENTIFIER)");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.ComplianceScheme", b =>
                {
                    b.HasOne("BackendAccountService.Data.Entities.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.Enrolment", b =>
                {
                    b.HasOne("BackendAccountService.Data.Entities.PersonOrganisationConnection", "Connection")
                        .WithMany("Enrolments")
                        .HasForeignKey("ConnectionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendAccountService.Data.Entities.EnrolmentStatus", "EnrolmentStatus")
                        .WithMany()
                        .HasForeignKey("EnrolmentStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendAccountService.Data.Entities.ServiceRole", "ServiceRole")
                        .WithMany()
                        .HasForeignKey("ServiceRoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Connection");

                    b.Navigation("EnrolmentStatus");

                    b.Navigation("ServiceRole");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.Organisation", b =>
                {
                    b.HasOne("BackendAccountService.Data.Entities.Nation", "Nation")
                        .WithMany()
                        .HasForeignKey("NationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BackendAccountService.Data.Entities.OrganisationType", "OrganisationType")
                        .WithMany()
                        .HasForeignKey("OrganisationTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Nation");

                    b.Navigation("OrganisationType");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.OrganisationsConnection", b =>
                {
                    b.HasOne("BackendAccountService.Data.Entities.Organisation", "FromOrganisation")
                        .WithMany("FromOrganisationConnections")
                        .HasForeignKey("FromOrganisationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendAccountService.Data.Entities.InterOrganisationRole", "FromOrganisationRole")
                        .WithMany()
                        .HasForeignKey("FromOrganisationRoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendAccountService.Data.Entities.Organisation", "ToOrganisation")
                        .WithMany("ToOrganisationsConnections")
                        .HasForeignKey("ToOrganisationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendAccountService.Data.Entities.InterOrganisationRole", "ToOrganisationRole")
                        .WithMany()
                        .HasForeignKey("ToOrganisationRoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FromOrganisation");

                    b.Navigation("FromOrganisationRole");

                    b.Navigation("ToOrganisation");

                    b.Navigation("ToOrganisationRole");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.Person", b =>
                {
                    b.HasOne("BackendAccountService.Data.Entities.User", "User")
                        .WithOne("Person")
                        .HasForeignKey("BackendAccountService.Data.Entities.Person", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.PersonOrganisationConnection", b =>
                {
                    b.HasOne("BackendAccountService.Data.Entities.Organisation", "Organisation")
                        .WithMany("PersonOrganisationConnections")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendAccountService.Data.Entities.OrganisationToPersonRole", "OrganisationRole")
                        .WithMany()
                        .HasForeignKey("OrganisationRoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendAccountService.Data.Entities.Person", "Person")
                        .WithMany("OrganisationConnections")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendAccountService.Data.Entities.PersonInOrganisationRole", "PersonRole")
                        .WithMany()
                        .HasForeignKey("PersonRoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Organisation");

                    b.Navigation("OrganisationRole");

                    b.Navigation("Person");

                    b.Navigation("PersonRole");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.PersonsConnection", b =>
                {
                    b.HasOne("BackendAccountService.Data.Entities.Person", "FromPerson")
                        .WithMany("FromPersonConnections")
                        .HasForeignKey("FromPersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendAccountService.Data.Entities.InterPersonRole", "FromPersonRole")
                        .WithMany()
                        .HasForeignKey("FromPersonRoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendAccountService.Data.Entities.Person", "ToPerson")
                        .WithMany("ToPersonConnections")
                        .HasForeignKey("ToPersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendAccountService.Data.Entities.InterPersonRole", "ToPersonRole")
                        .WithMany()
                        .HasForeignKey("ToPersonRoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FromPerson");

                    b.Navigation("FromPersonRole");

                    b.Navigation("ToPerson");

                    b.Navigation("ToPersonRole");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.SelectedScheme", b =>
                {
                    b.HasOne("BackendAccountService.Data.Entities.ComplianceScheme", "ComplianceScheme")
                        .WithMany()
                        .HasForeignKey("ComplianceSchemeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackendAccountService.Data.Entities.OrganisationsConnection", "OrganisationConnection")
                        .WithMany()
                        .HasForeignKey("OrganisationConnectionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ComplianceScheme");

                    b.Navigation("OrganisationConnection");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.ServiceRole", b =>
                {
                    b.HasOne("BackendAccountService.Data.Entities.Service", "Service")
                        .WithMany("ServiceRoles")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.Organisation", b =>
                {
                    b.Navigation("FromOrganisationConnections");

                    b.Navigation("PersonOrganisationConnections");

                    b.Navigation("ToOrganisationsConnections");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.Person", b =>
                {
                    b.Navigation("FromPersonConnections");

                    b.Navigation("OrganisationConnections");

                    b.Navigation("ToPersonConnections");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.PersonOrganisationConnection", b =>
                {
                    b.Navigation("Enrolments");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.Service", b =>
                {
                    b.Navigation("ServiceRoles");
                });

            modelBuilder.Entity("BackendAccountService.Data.Entities.User", b =>
                {
                    b.Navigation("Person")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
